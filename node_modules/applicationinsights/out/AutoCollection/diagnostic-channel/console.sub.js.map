{"version":3,"file":"console.sub.js","sourceRoot":"","sources":["../../../AutoCollection/diagnostic-channel/console.sub.ts"],"names":[],"mappings":";;;AAGA,0DAA6D;AAC7D,0DAAwE;AAExE,yDAA6D;AAI7D,IAAI,OAAO,GAAsB,EAAE,CAAC;AAEpC,IAAM,UAAU,GAAG,UAAC,KAA8C;IAC9D,IAAI,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,OAAyB,CAAC;IACnD,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;QACnB,IAAI,OAAO,YAAY,KAAK,EAAE;YAC1B,MAAM,CAAC,cAAc,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;SACjD;aAAM;YACH,sCAAsC;YACtC,IAAI,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjD,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aACtD;YACD,MAAM,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAa,CAAC,OAAO,CAAC,CAAC,CAAC,yBAAa,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;SAC9H;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,SAAgB,MAAM,CAAC,OAAgB,EAAE,MAAuB;IAC5D,IAAI,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;IACtC,IAAI,OAAO,EAAE;QACT,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,SAAS,CAA0B,SAAS,EAAE,UAAU,CAAC,CAAC;YAClE,IAAI,SAAS,EAAE;gBACX,SAAS,CAAC,kBAAkB,CAAC,oCAAwB,CAAC,OAAO,CAAC,CAAC;aAClE;SACJ;QAAA,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACxB;SAAM;QACH,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,IAAI,MAAM,EAAX,CAAW,CAAC,CAAC;QAC7C,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;YAC3C,IAAI,SAAS,EAAE;gBACX,SAAS,CAAC,qBAAqB,CAAC,oCAAwB,CAAC,OAAO,CAAC,CAAC;aACrE;SACJ;KACJ;AACL,CAAC;AAnBD,wBAmBC;AAED,SAAgB,OAAO;IACnB,4BAAO,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAC3C,OAAO,GAAG,EAAE,CAAC;AACjB,CAAC;AAHD,0BAGC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nimport TelemetryClient = require(\"../../Library/TelemetryClient\");\r\nimport { SeverityLevel } from \"../../Declarations/Contracts\";\r\nimport { StatsbeatInstrumentation } from \"../../Declarations/Constants\";\r\n\r\nimport { channel, IStandardEvent } from \"diagnostic-channel\";\r\n\r\nimport { console as consolePub } from \"diagnostic-channel-publishers\";\r\n\r\nlet clients: TelemetryClient[] = [];\r\n\r\nconst subscriber = (event: IStandardEvent<consolePub.IConsoleData>) => {\r\n    let message = event.data.message as Error | string;\r\n    clients.forEach((client) => {\r\n        if (message instanceof Error) {\r\n            client.trackException({ exception: message });\r\n        } else {\r\n            // Message can have a trailing newline\r\n            if (message.lastIndexOf(\"\\n\") == message.length - 1) {\r\n                message = message.substring(0, message.length - 1);\r\n            }\r\n            client.trackTrace({ message: message, severity: (event.data.stderr ? SeverityLevel.Warning : SeverityLevel.Information) });\r\n        }\r\n    });\r\n};\r\n\r\nexport function enable(enabled: boolean, client: TelemetryClient) {\r\n    let statsbeat = client.getStatsbeat();\r\n    if (enabled) {\r\n        if (clients.length === 0) {\r\n            channel.subscribe<consolePub.IConsoleData>(\"console\", subscriber);\r\n            if (statsbeat) {\r\n                statsbeat.addInstrumentation(StatsbeatInstrumentation.CONSOLE);\r\n            }\r\n        };\r\n        clients.push(client);\r\n    } else {\r\n        clients = clients.filter((c) => c != client);\r\n        if (clients.length === 0) {\r\n            channel.unsubscribe(\"console\", subscriber);\r\n            if (statsbeat) {\r\n                statsbeat.removeInstrumentation(StatsbeatInstrumentation.CONSOLE);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function dispose() {\r\n    channel.unsubscribe(\"console\", subscriber);\r\n    clients = [];\r\n}\r\n"]}