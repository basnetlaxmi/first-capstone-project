{"version":3,"file":"bunyan.sub.js","sourceRoot":"","sources":["../../../AutoCollection/diagnostic-channel/bunyan.sub.ts"],"names":[],"mappings":";;;AAGA,0DAA6D;AAC7D,0DAAwE;AAExE,yDAA6D;AAI7D,IAAI,OAAO,GAAsB,EAAE,CAAC;AAEpC,6GAA6G;AAC7G,IAAM,kBAAkB,GAA8B;IAClD,EAAE,EAAE,yBAAa,CAAC,OAAO;IACzB,EAAE,EAAE,yBAAa,CAAC,OAAO;IACzB,EAAE,EAAE,yBAAa,CAAC,WAAW;IAC7B,EAAE,EAAE,yBAAa,CAAC,OAAO;IACzB,EAAE,EAAE,yBAAa,CAAC,KAAK;IACvB,EAAE,EAAE,yBAAa,CAAC,QAAQ;CAC7B,CAAC;AAEF,IAAM,UAAU,GAAG,UAAC,KAAyC;IACzD,IAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,MAAwB,CAAC;IACpD,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;QACnB,IAAM,OAAO,GAAG,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrD,IAAI,OAAO,YAAY,KAAK,EAAE;YAC1B,MAAM,CAAC,cAAc,CAAC,EAAE,SAAS,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;SACnD;aAAM;YACH,MAAM,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;SAC9D;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,SAAgB,MAAM,CAAC,OAAgB,EAAE,MAAuB;IAC5D,IAAI,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;IACtC,IAAI,OAAO,EAAE;QACT,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,SAAS,CAAqB,QAAQ,EAAE,UAAU,CAAC,CAAC;YAC5D,IAAI,SAAS,EAAE;gBACX,SAAS,CAAC,kBAAkB,CAAC,oCAAwB,CAAC,MAAM,CAAC,CAAC;aACjE;SACJ;QAAA,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACxB;SAAM;QACH,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,IAAI,MAAM,EAAX,CAAW,CAAC,CAAC;QAC7C,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YAC1C,IAAI,SAAS,EAAE;gBACX,SAAS,CAAC,qBAAqB,CAAC,oCAAwB,CAAC,MAAM,CAAC,CAAC;aACpE;SACJ;KACJ;AACL,CAAC;AAnBD,wBAmBC;AAED,SAAgB,OAAO;IACnB,4BAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IAC1C,OAAO,GAAG,EAAE,CAAC;AACjB,CAAC;AAHD,0BAGC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nimport TelemetryClient = require(\"../../Library/TelemetryClient\");\r\nimport { SeverityLevel } from \"../../Declarations/Contracts\";\r\nimport { StatsbeatInstrumentation } from \"../../Declarations/Constants\";\r\n\r\nimport { channel, IStandardEvent } from \"diagnostic-channel\";\r\n\r\nimport { bunyan } from \"diagnostic-channel-publishers\";\r\n\r\nlet clients: TelemetryClient[] = [];\r\n\r\n// Mapping from bunyan levels defined at https://github.com/trentm/node-bunyan/blob/master/lib/bunyan.js#L256\r\nconst bunyanToAILevelMap: { [key: number]: number } = {\r\n    10: SeverityLevel.Verbose,\r\n    20: SeverityLevel.Verbose,\r\n    30: SeverityLevel.Information,\r\n    40: SeverityLevel.Warning,\r\n    50: SeverityLevel.Error,\r\n    60: SeverityLevel.Critical,\r\n};\r\n\r\nconst subscriber = (event: IStandardEvent<bunyan.IBunyanData>) => {\r\n    const message = event.data.result as Error | string;\r\n    clients.forEach((client) => {\r\n        const AIlevel = bunyanToAILevelMap[event.data.level];\r\n        if (message instanceof Error) {\r\n            client.trackException({ exception: (message) });\r\n        } else {\r\n            client.trackTrace({ message: message, severity: AIlevel });\r\n        }\r\n    });\r\n};\r\n\r\nexport function enable(enabled: boolean, client: TelemetryClient) {\r\n    let statsbeat = client.getStatsbeat();\r\n    if (enabled) {\r\n        if (clients.length === 0) {\r\n            channel.subscribe<bunyan.IBunyanData>(\"bunyan\", subscriber);\r\n            if (statsbeat) {\r\n                statsbeat.addInstrumentation(StatsbeatInstrumentation.BUNYAN);\r\n            }\r\n        };\r\n        clients.push(client);\r\n    } else {\r\n        clients = clients.filter((c) => c != client);\r\n        if (clients.length === 0) {\r\n            channel.unsubscribe(\"bunyan\", subscriber);\r\n            if (statsbeat) {\r\n                statsbeat.removeInstrumentation(StatsbeatInstrumentation.BUNYAN);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function dispose() {\r\n    channel.unsubscribe(\"bunyan\", subscriber);\r\n    clients = [];\r\n}\r\n"]}