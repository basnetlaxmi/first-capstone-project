{"version":3,"file":"Statsbeat.js","sourceRoot":"","sources":["../../AutoCollection/Statsbeat.ts"],"names":[],"mappings":"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","sourcesContent":["import os = require(\"os\");\r\nimport EnvelopeFactory = require(\"../Library/EnvelopeFactory\");\r\nimport Logging = require(\"../Library/Logging\");\r\nimport Sender = require(\"../Library/Sender\");\r\nimport Constants = require(\"../Declarations/Constants\");\r\nimport Contracts = require(\"../Declarations/Contracts\");\r\nimport Vm = require(\"../Library/AzureVirtualMachine\");\r\nimport Config = require(\"../Library/Config\");\r\nimport Context = require(\"../Library/Context\");\r\nimport Network = require(\"./NetworkStatsbeat\");\r\n\r\nconst STATSBEAT_LANGUAGE = \"node\";\r\n\r\nclass Statsbeat {\r\n\r\n    public static CONNECTION_STRING = \"InstrumentationKey=c4a29126-a7cb-47e5-b348-11414998b11e;IngestionEndpoint=https://dc.services.visualstudio.com/\";\r\n    public static STATS_COLLECTION_SHORT_INTERVAL: number = 900000; // 15 minutes\r\n    public static STATS_COLLECTION_LONG_INTERVAL: number = 1440000; // 1 day\r\n\r\n    private static TAG = \"Statsbeat\";\r\n\r\n    private _networkStatsbeatCollection: Array<Network.NetworkStatsbeat>;\r\n    private _sender: Sender;\r\n    private _handle: NodeJS.Timer | null;\r\n    private _longHandle: NodeJS.Timer | null;\r\n    private _isEnabled: boolean;\r\n    private _isInitialized: boolean;\r\n    private _config: Config;\r\n    private _statsbeatConfig: Config;\r\n    private _isVM: boolean | undefined;\r\n    private _statbeatMetrics: Array<{ name: string; value: number, properties: {} }>;\r\n\r\n    // Custom dimensions\r\n    private _resourceProvider: string;\r\n    private _resourceIdentifier: string;\r\n    private _sdkVersion: string;\r\n    private _runtimeVersion: string;\r\n    private _os: string;\r\n    private _language: string;\r\n    private _cikey: string;\r\n    private _attach: string = Constants.StatsbeatAttach.sdk; // Default is SDK\r\n    private _feature: number = Constants.StatsbeatFeature.NONE;\r\n    private _instrumentation: number = Constants.StatsbeatInstrumentation.NONE;\r\n\r\n    constructor(config: Config) {\r\n        this._isInitialized = false;\r\n        this._statbeatMetrics = [];\r\n        this._networkStatsbeatCollection = [];\r\n        this._config = config;\r\n        this._statsbeatConfig = new Config(Statsbeat.CONNECTION_STRING);\r\n        this._sender = new Sender(this._statsbeatConfig);\r\n    }\r\n\r\n    public enable(isEnabled: boolean) {\r\n        this._isEnabled = isEnabled;\r\n        if (this._isEnabled && !this._isInitialized) {\r\n            this._getCustomProperties();\r\n            this._isInitialized = true;\r\n        }\r\n        if (isEnabled) {\r\n            if (!this._handle) {\r\n                this._handle = setInterval(() => {\r\n                    this.trackShortIntervalStatsbeats().catch((error) => {\r\n                        // Failed to send Statsbeat\r\n                        Logging.info(Statsbeat.TAG, error);\r\n                    });\r\n                }, Statsbeat.STATS_COLLECTION_SHORT_INTERVAL);\r\n                this._handle.unref(); // Allow the app to terminate even while this loop is going on\r\n            }\r\n            if (!this._longHandle) {\r\n                // On first enablement\r\n                this.trackLongIntervalStatsbeats().catch((error) => {\r\n                    // Failed to send Statsbeat\r\n                    Logging.info(Statsbeat.TAG, error);\r\n                });\r\n                this._longHandle = setInterval(() => {\r\n                    this.trackLongIntervalStatsbeats().catch((error) => {\r\n                        // Failed to send Statsbeat\r\n                        Logging.info(Statsbeat.TAG, error);\r\n                    });\r\n                }, Statsbeat.STATS_COLLECTION_LONG_INTERVAL);\r\n                this._longHandle.unref(); // Allow the app to terminate even while this loop is going on\r\n            }\r\n        } else {\r\n            if (this._handle) {\r\n                clearInterval(this._handle);\r\n                this._handle = null;\r\n            }\r\n            if (this._longHandle) {\r\n                clearInterval(this._longHandle);\r\n                this._longHandle = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public isInitialized() {\r\n        return this._isInitialized;\r\n    }\r\n\r\n    public isEnabled() {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public setCodelessAttach() {\r\n        this._attach = Constants.StatsbeatAttach.codeless;\r\n    }\r\n\r\n    public addFeature(feature: Constants.StatsbeatFeature) {\r\n        this._feature |= feature;\r\n    }\r\n\r\n    public removeFeature(feature: Constants.StatsbeatFeature) {\r\n        this._feature &= ~feature;\r\n    }\r\n\r\n    public addInstrumentation(instrumentation: Constants.StatsbeatInstrumentation) {\r\n        this._instrumentation |= instrumentation;\r\n    }\r\n\r\n    public removeInstrumentation(instrumentation: Constants.StatsbeatInstrumentation) {\r\n        this._instrumentation &= ~instrumentation;\r\n    }\r\n\r\n    public countRequest(category: number, endpoint: string, duration: number, success: boolean) {\r\n        if (!this.isEnabled()) {\r\n            return;\r\n        }\r\n        let counter: Network.NetworkStatsbeat = this._getNetworkStatsbeatCounter(category, endpoint);\r\n        counter.totalRequestCount++;\r\n        counter.intervalRequestExecutionTime += duration;\r\n        if (success === false) {\r\n            counter.totalFailedRequestCount++;\r\n        }\r\n        else {\r\n            counter.totalSuccesfulRequestCount++;\r\n        }\r\n\r\n    }\r\n\r\n    public countException(category: number, endpoint: string) {\r\n        if (!this.isEnabled()) {\r\n            return;\r\n        }\r\n        let counter: Network.NetworkStatsbeat = this._getNetworkStatsbeatCounter(category, endpoint);\r\n        counter.exceptionCount++;\r\n    }\r\n\r\n    public countThrottle(category: number, endpoint: string) {\r\n        if (!this.isEnabled()) {\r\n            return;\r\n        }\r\n        let counter: Network.NetworkStatsbeat = this._getNetworkStatsbeatCounter(category, endpoint);\r\n        counter.throttleCount++;\r\n    }\r\n\r\n    public countRetry(category: number, endpoint: string) {\r\n        if (!this.isEnabled()) {\r\n            return;\r\n        }\r\n        let counter: Network.NetworkStatsbeat = this._getNetworkStatsbeatCounter(category, endpoint);\r\n        counter.retryCount++;\r\n    }\r\n\r\n    public async trackShortIntervalStatsbeats() {\r\n        this._getResourceProvider(async () => {\r\n            let networkProperties = {\r\n                \"os\": this._os,\r\n                \"rp\": this._resourceProvider,\r\n                \"cikey\": this._cikey,\r\n                \"runtimeVersion\": this._runtimeVersion,\r\n                \"language\": this._language,\r\n                \"version\": this._sdkVersion,\r\n                \"attach\": this._attach,\r\n            }\r\n            this._trackRequestDuration(networkProperties);\r\n            this._trackRequestsCount(networkProperties);\r\n            await this._sendStatsbeats();\r\n        });\r\n    }\r\n\r\n    public async trackLongIntervalStatsbeats() {\r\n        this._getResourceProvider(async () => {\r\n            let commonProperties = {\r\n                \"os\": this._os,\r\n                \"rp\": this._resourceProvider,\r\n                \"cikey\": this._cikey,\r\n                \"runtimeVersion\": this._runtimeVersion,\r\n                \"language\": this._language,\r\n                \"version\": this._sdkVersion,\r\n                \"attach\": this._attach,\r\n            };\r\n            let attachProperties = Object.assign({\r\n                \"rpid\": this._resourceIdentifier,\r\n            }, commonProperties);\r\n            this._statbeatMetrics.push({ name: Constants.StatsbeatCounter.ATTACH, value: 1, properties: attachProperties });\r\n            let featureProperties = Object.assign({ \"feature\": this._feature, \"type\": Constants.StatsbeatFeatureType.Feature }, commonProperties);\r\n            let instrumentationProperties = Object.assign({ \"feature\": this._instrumentation, \"type\": Constants.StatsbeatFeatureType.Instrumentation }, commonProperties);\r\n            this._statbeatMetrics.push({ name: Constants.StatsbeatCounter.FEATURE, value: 1, properties: instrumentationProperties });\r\n            this._statbeatMetrics.push({ name: Constants.StatsbeatCounter.FEATURE, value: 1, properties: featureProperties });\r\n            await this._sendStatsbeats();\r\n        });\r\n    }\r\n\r\n    private _getNetworkStatsbeatCounter(endpoint: number, host: string): Network.NetworkStatsbeat {\r\n        // Check if counter is available\r\n        for (let i = 0; i < this._networkStatsbeatCollection.length; i++) {\r\n            // Same object\r\n            if (endpoint === this._networkStatsbeatCollection[i].endpoint &&\r\n                host === this._networkStatsbeatCollection[i].host) {\r\n                return this._networkStatsbeatCollection[i];\r\n            }\r\n        }\r\n        // Create a new one if not found\r\n        let newCounter = new Network.NetworkStatsbeat(endpoint, host);\r\n        this._networkStatsbeatCollection.push(newCounter);\r\n        return newCounter;\r\n    }\r\n\r\n    private _trackRequestDuration(commonProperties: {}) {\r\n        for (let i = 0; i < this._networkStatsbeatCollection.length; i++) {\r\n            var currentCounter = this._networkStatsbeatCollection[i];\r\n            currentCounter.time = +new Date;\r\n            var intervalRequests = (currentCounter.totalRequestCount - currentCounter.lastRequestCount) || 0;\r\n            var elapsedMs = currentCounter.time - currentCounter.lastTime;\r\n            var averageRequestExecutionTime = ((currentCounter.intervalRequestExecutionTime - currentCounter.lastIntervalRequestExecutionTime) / intervalRequests) || 0;\r\n            currentCounter.lastIntervalRequestExecutionTime = currentCounter.intervalRequestExecutionTime; // reset\r\n            if (elapsedMs > 0 && intervalRequests > 0) {\r\n                // Add extra properties\r\n                let properties = Object.assign({ \"endpoint\": this._networkStatsbeatCollection[i].endpoint, \"host\": this._networkStatsbeatCollection[i].host }, commonProperties);\r\n                this._statbeatMetrics.push({ name: Constants.StatsbeatCounter.REQUEST_DURATION, value: averageRequestExecutionTime, properties: properties });\r\n            }\r\n            // Set last counters\r\n            currentCounter.lastRequestCount = currentCounter.totalRequestCount;\r\n            currentCounter.lastTime = currentCounter.time;\r\n        }\r\n    }\r\n\r\n    private _trackRequestsCount(commonProperties: {}) {\r\n        for (let i = 0; i < this._networkStatsbeatCollection.length; i++) {\r\n            var currentCounter = this._networkStatsbeatCollection[i];\r\n            let properties = Object.assign({ \"endpoint\": currentCounter.endpoint, \"host\": currentCounter.host }, commonProperties);\r\n            if (currentCounter.totalSuccesfulRequestCount > 0) {\r\n                this._statbeatMetrics.push({ name: Constants.StatsbeatCounter.REQUEST_SUCCESS, value: currentCounter.totalSuccesfulRequestCount, properties: properties });\r\n                currentCounter.totalSuccesfulRequestCount = 0; //Reset\r\n            }\r\n            if (currentCounter.totalFailedRequestCount > 0) {\r\n                this._statbeatMetrics.push({ name: Constants.StatsbeatCounter.REQUEST_FAILURE, value: currentCounter.totalFailedRequestCount, properties: properties });\r\n                currentCounter.totalFailedRequestCount = 0; //Reset\r\n            }\r\n            if (currentCounter.retryCount > 0) {\r\n                this._statbeatMetrics.push({ name: Constants.StatsbeatCounter.RETRY_COUNT, value: currentCounter.retryCount, properties: properties });\r\n                currentCounter.retryCount = 0; //Reset\r\n            }\r\n            if (currentCounter.throttleCount > 0) {\r\n                this._statbeatMetrics.push({ name: Constants.StatsbeatCounter.THROTTLE_COUNT, value: currentCounter.throttleCount, properties: properties });\r\n                currentCounter.throttleCount = 0; //Reset\r\n            }\r\n            if (currentCounter.exceptionCount > 0) {\r\n                this._statbeatMetrics.push({ name: Constants.StatsbeatCounter.EXCEPTION_COUNT, value: currentCounter.exceptionCount, properties: properties });\r\n                currentCounter.exceptionCount = 0; //Reset\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _sendStatsbeats() {\r\n        let envelopes: Array<Contracts.Envelope> = [];\r\n        for (let i = 0; i < this._statbeatMetrics.length; i++) {\r\n            let statsbeat: Contracts.MetricTelemetry = {\r\n                name: this._statbeatMetrics[i].name,\r\n                value: this._statbeatMetrics[i].value,\r\n                properties: this._statbeatMetrics[i].properties\r\n            };\r\n            let envelope = EnvelopeFactory.createEnvelope(statsbeat, Contracts.TelemetryType.Metric, null, null, this._statsbeatConfig);\r\n            envelope.name = Constants.StatsbeatTelemetryName;\r\n            envelopes.push(envelope);\r\n        }\r\n        this._statbeatMetrics = [];\r\n        await this._sender.send(envelopes);\r\n    }\r\n\r\n    private _getCustomProperties() {\r\n        this._language = STATSBEAT_LANGUAGE;\r\n        this._cikey = this._config.instrumentationKey;\r\n        this._sdkVersion = Context.sdkVersion; // \"node\" or \"node-nativeperf\"\r\n        this._os = os.type();\r\n        this._runtimeVersion = process.version;\r\n    }\r\n\r\n    private _getResourceProvider(callback: () => void) {\r\n        // Check resource provider\r\n        let waiting: boolean = false;\r\n        this._resourceProvider = Constants.StatsbeatResourceProvider.unknown;\r\n        this._resourceIdentifier = Constants.StatsbeatResourceProvider.unknown;\r\n\r\n        if (process.env.WEBSITE_SITE_NAME) { // Web apps\r\n            this._resourceProvider = Constants.StatsbeatResourceProvider.appsvc;\r\n            this._resourceIdentifier = process.env.WEBSITE_SITE_NAME;\r\n            if (process.env.WEBSITE_HOME_STAMPNAME) {\r\n                this._resourceIdentifier += \"/\" + process.env.WEBSITE_HOME_STAMPNAME;\r\n            }\r\n        } else if (process.env.FUNCTIONS_WORKER_RUNTIME) { // Function apps\r\n            this._resourceProvider = Constants.StatsbeatResourceProvider.function;\r\n            if (process.env.WEBSITE_HOSTNAME) {\r\n                this._resourceIdentifier = process.env.WEBSITE_HOSTNAME;\r\n            }\r\n        } else if (this._config) {\r\n            if (this._isVM === undefined || this._isVM == true) {\r\n                waiting = true;\r\n                Vm.AzureVirtualMachine.getAzureComputeMetadata(this._config, (vmInfo) => {\r\n                    this._isVM = vmInfo.isVM;\r\n                    if (this._isVM) {\r\n                        this._resourceProvider = Constants.StatsbeatResourceProvider.vm;\r\n                        this._resourceIdentifier = vmInfo.id + \"/\" + vmInfo.subscriptionId;\r\n                        // Override OS as VM info have higher precedence\r\n                        if (vmInfo.osType) {\r\n                            this._os = vmInfo.osType;\r\n                        }\r\n                    }\r\n                    callback();\r\n                });\r\n            } else {\r\n                this._resourceProvider = Constants.StatsbeatResourceProvider.unknown;\r\n            }\r\n        }\r\n        if (!waiting) {\r\n            callback();\r\n        }\r\n    }\r\n}\r\n\r\nexport = Statsbeat;\r\n"]}